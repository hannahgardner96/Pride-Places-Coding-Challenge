{"version":3,"sources":["components/PostModal.jsx","components/PostPreview.jsx","components/PostIndex.jsx","App.js","reportWebVitals.js","index.js"],"names":["PostModal","post","showModal","setShowModal","backgroundColor","isOpen","ariaHideApp","style","content","className","title","userId","body","onClick","PostPreview","useState","backgroundColors","PostIndex","posts","setPosts","useEffect","fetch","then","response","json","map","Math","floor","random","length","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEaA,EAAY,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBAEvD,OACI,cAAC,IAAD,CAAYC,OAAWH,EAAYI,aAAgB,EAAQC,MAAS,CAACC,QAAS,CAACJ,gBAAiBA,IAAhG,SACI,sBAAKK,UAAY,WAAjB,UACI,oBAAIA,UAAY,YAAhB,SAA8BR,EAAKS,QACnC,mDAAuBT,EAAKU,UAC5B,6BAAMV,EAAKW,OACX,wBAAQH,UAAY,cAAcI,QAAY,kBAAMV,GAAa,IAAjE,yBCPHW,EAAc,SAAC,GAA+B,IAA7Bb,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,gBAEhC,EAAkCW,oBAAS,GAA3C,mBAAOb,EAAP,KAAkBC,EAAlB,KAEA,OACI,qCACI,sBAAKM,UAAY,iBAAiBF,MAAS,CAACH,gBAAkBA,GAA9D,UACI,oBAAIK,UAAY,YAAhB,SAA8BR,EAAKS,QACnC,mDAAuBT,EAAKU,UAC5B,wBAAQF,UAAY,aAAaI,QAAY,kBAAMV,GAAa,IAAhE,qBAEJ,cAAC,EAAD,CAAWF,KAASA,EAAOC,UAAcA,EAAYC,aAAiBA,EAAeC,gBAAoBA,QCX/GY,EAAmB,CAAC,UAAW,UAAW,UAAW,WAE9CC,EAAY,WAErB,MAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAUA,OAPAC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,KAAKH,KACX,IAIC,qCACI,oBAAIV,UAAY,aAAhB,gCACA,qBAAKA,UAAY,eAAjB,SAEQS,EAAMO,KAAI,SAACxB,GACP,OAAO,cAAC,EAAD,CAAaA,KAASA,EAAuBG,gBAAoBY,EAAiBU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAiBa,UAA1F5B,EAAK6B,aCjBxDC,EAJJ,WACV,OAAO,cAAC,EAAD,KCSMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.449525ee.chunk.js","sourcesContent":["import ReactModal from 'react-modal'\n\nexport const PostModal = ({ post, showModal, setShowModal, backgroundColor }) => {\n\n    return (\n        <ReactModal isOpen = { showModal } ariaHideApp = { false } style = {{content: {backgroundColor: backgroundColor}}} >\n            <div className = \"modalDiv\">\n                <h3 className = \"postTitle\">{ post.title }</h3>\n                <h5>Authored by user { post.userId }</h5>\n                <h6>{ post.body }</h6>\n                <button className = \"closeButton\" onClick = { () => setShowModal(false) }>CLOSE</button>\n            </div>\n        </ReactModal>\n    )\n}","import { useState } from \"react\"\nimport { PostModal } from \"./PostModal\"\n\nexport const PostPreview = ({ post, backgroundColor }) => {\n    // STATE //\n    const [showModal, setShowModal] = useState(false)\n\n    return (\n        <>\n            <div className = \"postPreviewDiv\" style = {{backgroundColor:  backgroundColor}}>\n                <h3 className = \"postTitle\">{ post.title }</h3>\n                <h5>Authored by user { post.userId }</h5>\n                <button className = \"viewButton\" onClick = { () => setShowModal(true) } >VIEW</button>\n            </div>\n            <PostModal post = { post } showModal = { showModal } setShowModal = { setShowModal } backgroundColor = { backgroundColor }/>\n        </>\n        \n    )\n}","import { useEffect, useState } from \"react\"\nimport { PostPreview } from \"./PostPreview\"\n\nconst backgroundColors = [\"#DCA4F6\", \"#29B6F6\", \"#EF5350\", \"#FF98DA\"]\n\nexport const PostIndex = () => {\n    // STATE // \n    const [posts, setPosts] = useState([])\n\n    // HOOKS //\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then((response) => response.json())\n            .then(setPosts)\n    }, [])\n\n    \n    return (\n        <>    \n            <h1 className = \"indexTitle\">PRIDE PLACES INDEX</h1>\n            <div className = \"postIndexDiv\">\n                { \n                    posts.map((post) => {\n                        return <PostPreview post = { post } key = {post.id} backgroundColor = { backgroundColors[Math.floor(Math.random() * backgroundColors.length)] }/>\n                    })\n                }\n            </div>\n        </>\n    )\n}","import { PostIndex } from \"./components/PostIndex\"\n\nconst App = () => {\n  return <PostIndex/>\n}\n\n export default App\n\n// Planning\n// components needed: \n  // index of posts\n    // onload fetch posts\n  // individual post preview\n  // post modal\n  // button to open post modal","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}